编译环境为 Ubuntu 64 16.04,LTS
首先安装CMake 最新版本到3.9.1,参考：https://blog.csdn.net/u010472607/article/details/76166008
下载： android.toolchain.cmake到某个目录

下载 jthread-1.3.3, jrtplib-3.11.1到jrtp目录
现在开始编译 jthread

首先是几个地方的修改：
1）修改CMakeLists.txt 中 cmake_minimum_required(VERSION 3.7)，至少3.7版本，我们要编译arm64-v8a,版本太低不支持
2) 修改jthread.h和 pthread/jthread.cpp

  	jthread.h:
	#if defined(ANDROID)
		#include <jni.h>
	#endif

	#if defined(ANDROID)
		void JthreadInitVM(JavaVM* vm);
	#endif

	jthread.cpp


#if defined(ANDROID)

namespace {

JavaVM* g_jvm = NULL;

}

void JthreadInitVM(JavaVM* vm) {
  g_jvm = vm;
}

void JthreadDetachFromVM() {
  // Ignore the return value, if the thread is not attached, DetachCurrentThread
  // will fail. But it is ok as the native thread may never be attached.
  if (g_jvm)
    g_jvm->DetachCurrentThread();
}
#endif


void *JThread::TheThread(void *param)
{
	JThread *jthread;
	void *ret;
	
	jthread = (JThread *)param;
	
	jthread->continuemutex2.Lock();
	jthread->runningmutex.Lock();
	jthread->running = true;
	jthread->runningmutex.Unlock();
	
	jthread->continuemutex.Lock();
	jthread->continuemutex.Unlock();
	
	ret = jthread->Thread();

	jthread->runningmutex.Lock();
	jthread->running = false;
	jthread->retval = ret;
	jthread->threadid = 0;
	jthread->runningmutex.Unlock();

#if defined(ANDROID)
	JthreadDetachFromVM();
#endif
	return NULL;
}

编译armeabi

#!/bin/bash

CMAKE_TOOLCHAIN=/home/bronze/Desktop/android-cmake-master
cmake 	-DCMAKE_TOOLCHAIN_FILE=/home/bronze/Desktop/android-cmake-master/android.toolchain.cmake \
	-DANDROID_NDK=${NDKROOT}  \
	-DCMAKE_BUILD_TYPE=Release  \
	-DANDROID_ABI="armeabi"  \
	-DANDROID_NATIVE_API_LEVEL="android-19" \
	-DANDROID_STL="gnustl_static" \
	-DCMAKE_INSTALL_PREFIX="/home/bronze/Documents/android/build/jrtp/arm" \
	.

	编译armv7:
	#!/bin/bash

CMAKE_TOOLCHAIN=/home/bronze/Desktop/android-cmake-master
cmake 	-DCMAKE_TOOLCHAIN_FILE=/home/bronze/Desktop/android-cmake-master/android.toolchain.cmake \
	-DANDROID_NDK=${NDKROOT}  \
	-DCMAKE_BUILD_TYPE=Release  \
	-DANDROID_ABI="armeabi-v7a"  \
	-DANDROID_NATIVE_API_LEVEL="android-19" \
	-DANDROID_STL="gnustl_static" \
	-DCMAKE_INSTALL_PREFIX="/home/bronze/Documents/android/build/jrtp/armeabi-v7a" \
	.

编译 arm64-v8a:

#!/bin/bash

CMAKE_TOOLCHAIN=/home/bronze/Desktop/android-cmake-master
cmake 	-DCMAKE_TOOLCHAIN_FILE=/home/bronze/Desktop/android-cmake-master/android.toolchain.cmake \
	-DANDROID_NDK=${NDKROOT}  \
	-DCMAKE_BUILD_TYPE=Release  \
	-DANDROID_ABI="arm64-v8a"  \
	-DANDROID_NATIVE_API_LEVEL="android-21" \
	-DANDROID_STL="gnustl_static" \
	-DCMAKE_INSTALL_PREFIX="/home/bronze/Documents/android/build/jrtp/arm64-v8a" \
	.

2. 编译jrtplib
  
  修改CMakeLists.txt :
  (1) cmake_minimum_required(VERSION 3.7)

  (2)
if (CMAKE_CROSSCOMPILING)
	option (JRTPLIB_USE_BIGENDIAN "Target platform is big endian" FALSE)
	if (JRTPLIB_USE_BIGENDIAN)
		set(RTP_ENDIAN "#define RTP_BIG_ENDIAN")
	else (JRTPLIB_USE_BIGENDIAN)
		set(RTP_ENDIAN "// Little endian system")
	endif (JRTPLIB_USE_BIGENDIAN)
else (CMAKE_CROSSCOMPILING)
	#test_big_endian(JRTPLIB_BIGENDIAN)
	#if (JRTPLIB_BIGENDIAN)
	#	set(RTP_ENDIAN "#define RTP_BIG_ENDIAN")
	#else (JRTPLIB_BIGENDIAN)
		set(RTP_ENDIAN "// Little endian system")
	#endif (JRTPLIB_BIGENDIAN)
endif (CMAKE_CROSSCOMPILING)

(3)
#add_subdirectory(examples)

  修改： rtpsocketutilinternal.h

  	#ifdef RTP_SOCKLENTYPE_UINT
		#define RTPSOCKLENTYPE						unsigned int
	#else
		#define RTPSOCKLENTYPE						socklen_t
	#endif // RTP_SOCKLENTYPE_UINT

编译 armeabi:
#!/bin/bash

CMAKE_TOOLCHAIN=/home/bronze/Desktop/android-cmake-master
cmake 	-DCMAKE_TOOLCHAIN_FILE=/home/bronze/Desktop/android-cmake-master/android.toolchain.cmake \
	-DANDROID_NDK=${NDKROOT}  \
	-DCMAKE_BUILD_TYPE=Release  \
	-DANDROID_ABI="armeabi"  \
	-DANDROID_NATIVE_API_LEVEL="android-19" \
	-DANDROID_STL="gnustl_static" \
	-DCMAKE_CXX_FLAGS="-Wno-error=unused-result" \
	-DJTHREAD_INCLUDE_DIRS="home/bronze/Documents/android/build/jrtp/arm/include" \
	-DJTHREAD_LIBRARIES="home/bronze/Documents/android/build/jrtp/arm/lib" \
	-DCMAKE_INSTALL_PREFIX="/home/bronze/Documents/android/build/jrtp/arm" \
	-DCMAKE_FIND_ROOT_PATH=/home/bronze/Documents/android/build/jrtp/arm \
	.
编译： armv7


#!/bin/bash

CMAKE_TOOLCHAIN=/home/bronze/Desktop/android-cmake-master
cmake 	-DCMAKE_TOOLCHAIN_FILE=/home/bronze/Desktop/android-cmake-master/android.toolchain.cmake \
	-DANDROID_NDK=${NDKROOT}  \
	-DCMAKE_BUILD_TYPE=Release  \
	-DANDROID_ABI="armeabi-v7a"  \
	-DANDROID_NATIVE_API_LEVEL="android-19" \
	-DANDROID_STL="gnustl_static" \
	-DCMAKE_CXX_FLAGS="-Wno-error=unused-result" \
	-DJTHREAD_INCLUDE_DIRS="home/bronze/Documents/android/build/jrtp/armeabi-v7a/include" \
	-DJTHREAD_LIBRARIES="home/bronze/Documents/android/build/jrtp/armeabi-v7a/lib" \
	-DCMAKE_INSTALL_PREFIX="/home/bronze/Documents/android/build/jrtp/armeabi-v7a" \
	-DCMAKE_FIND_ROOT_PATH=/home/bronze/Documents/android/build/jrtp/armeabi-v7a \
	.


编译：arm64-v8a

#!/bin/bash

CMAKE_TOOLCHAIN=/home/bronze/Desktop/android-cmake-master
cmake 	-DCMAKE_TOOLCHAIN_FILE=/home/bronze/Desktop/android-cmake-master/android.toolchain.cmake \
	-DANDROID_NDK=${NDKROOT}  \
	-DCMAKE_BUILD_TYPE=Release  \
	-DANDROID_ABI="arm64-v8a"  \
	-DANDROID_NATIVE_API_LEVEL="android-21" \
	-DANDROID_STL="gnustl_static" \
	-DCMAKE_CXX_FLAGS="-Wno-error=unused-result" \
	-DJTHREAD_INCLUDE_DIRS="home/bronze/Documents/android/build/jrtp/arm64-v8a/include" \
	-DJTHREAD_LIBRARIES="home/bronze/Documents/android/build/jrtp/arm64-v8a/lib" \
	-DCMAKE_INSTALL_PREFIX="/home/bronze/Documents/android/build/jrtp/arm64-v8a" \
	-DCMAKE_FIND_ROOT_PATH=/home/bronze/Documents/android/build/jrtp/arm64-v8a \
	.





